<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.rayiooo.top</id>
    <title>猫崎板子</title>
    <updated>2020-05-26T03:45:48.395Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.rayiooo.top"/>
    <link rel="self" href="https://www.rayiooo.top/atom.xml"/>
    <subtitle>いらっしゃいませ</subtitle>
    <logo>https://www.rayiooo.top/images/avatar.png</logo>
    <icon>https://www.rayiooo.top/favicon.ico</icon>
    <rights>All rights reserved 2020, 猫崎板子</rights>
    <entry>
        <title type="html"><![CDATA[信息检索课程设计之 SDU新闻网站Python全站爬取+索引构建+搜索引擎]]></title>
        <id>https://www.rayiooo.top/post/xin-xi-jian-suo-ke-cheng-she-ji-zhi-sdu-xin-wen-wang-zhan-quan-zhan-pa-qu-suo-yin-gou-jian-sou-suo-yin-qing/</id>
        <link href="https://www.rayiooo.top/post/xin-xi-jian-suo-ke-cheng-she-ji-zhi-sdu-xin-wen-wang-zhan-quan-zhan-pa-qu-suo-yin-gou-jian-sou-suo-yin-qing/">
        </link>
        <updated>2020-05-26T03:36:22.000Z</updated>
        <summary type="html"><![CDATA[<p>信息检索课程设计<a href="http://view.sdu.edu.cn/">sdu视点新闻</a>全站Python爬虫爬取+索引构建+搜索引擎查询练习程序（1805）。</p>
<p>以前在gh仓库总结的内容，没想到被人转载不带出处，不如我自己来发一遍叭。</p>
]]></summary>
        <content type="html"><![CDATA[<p>信息检索课程设计<a href="http://view.sdu.edu.cn/">sdu视点新闻</a>全站Python爬虫爬取+索引构建+搜索引擎查询练习程序（1805）。</p>
<p>以前在gh仓库总结的内容，没想到被人转载不带出处，不如我自己来发一遍叭。</p>
<!-- more -->
<p>源代码：<a href="https://github.com/rayiooo/SduViewWebSpider">Github</a></p>
<blockquote>
<p>爬虫功能使用Python的scrapy库实现，并用MongoDB数据库进行存储。</p>
<p>索引构建和搜索功能用Python的Whoosh和jieba库实现。（由于lucene是java库，所以pyLucene库的安装极其麻烦，因此选用Python原生库Whoosh实现，并使用jieba进行中文分词。）</p>
<p>搜索网页界面用django实现，页面模板套用<a href="http://www.bootcdn.cn/">BootCDN</a>。</p>
</blockquote>
<h2 id="1-要求">1 要求</h2>
<p>以下是检索的基本要求：可以利用lucene、nutch等开源工具，利用Python、Java等编程语言，但需要分别演示并说明原理。</p>
<ul>
<li>
<ol>
<li><strong>Web网页信息抽取</strong><br>
以山东大学新闻网为起点进行网页的循环爬取，保持爬虫在view.sdu.edu.cn之内（即只爬取这个站点的网页），爬取的网页数量越多越好。</li>
</ol>
</li>
<li>
<ol start="2">
<li><strong>索引构建</strong><br>
对上一步爬取到的网页进行结构化预处理，包括基于模板的信息抽取、分字段解析、分词、构建索引等。</li>
</ol>
</li>
<li>
<ol start="3">
<li><strong>检索排序</strong><br>
对上一步构建的索引库进行查询，对于给定的查询，给出检索结果，明白排序的原理及方法。</li>
</ol>
</li>
</ul>
<h2 id="2-运行方式">2 运行方式</h2>
<ul>
<li>
<p>运行<code>sduspider/run.py</code>来进行网络爬虫，这个过程将持续十多个小时，但可以随时终止，在下次运行时继续。</p>
</li>
<li>
<p>运行<code>indexbuilder/index_builder.py</code>来对数据库中的72000条数据构建索引，该过程将持续几个小时，但可以随时终止。</p>
</li>
<li>
<p>如果不熟悉Whoosh库的构建索引和query搜索功能，可以参考运行<code>indexbuilder/sample.py</code>。</p>
</li>
<li>
<p>运行<code>indexbuilder/query.py</code>来测试搜索功能。</p>
</li>
<li>
<p>运行<code>searchengine/run_server.py</code>打开搜索网页服务器，在浏览器中打开<a href="127.0.0.1:8000">127.0.0.1:8000</a>进入搜索页面执行搜索。</p>
</li>
</ul>
<h2 id="3-所需python库">3 所需python库</h2>
<ul>
<li>scrapy</li>
<li>requests</li>
<li>pymongo</li>
<li>whoosh</li>
<li>jieba</li>
<li>django</li>
</ul>
<h2 id="4-所需数据库">4 所需数据库</h2>
<ul>
<li>MongoDB</li>
<li>Mongo Management Studio 可视化工具（可选）</li>
</ul>
<h2 id="5-爬虫特性">5 爬虫特性</h2>
<p>爬虫代码位于<code>sduspider/</code>目录下。</p>
<h3 id="51-爬取内容">5.1 爬取内容</h3>
<p>爬虫爬取以 <a href="http://www.view.sdu.edu.cn/info/">http://www.view.sdu.edu.cn/info/</a> 打头的所有新闻页面的内容，这些内容包括：</p>
<table>
<thead>
<tr>
<th>Item</th>
<th>Item name</th>
</tr>
</thead>
<tbody>
<tr>
<td>标题</td>
<td>newsTitle</td>
</tr>
<tr>
<td>链接</td>
<td>newsUrl</td>
</tr>
<tr>
<td>阅读量</td>
<td>newsCliek</td>
</tr>
<tr>
<td>发布时间</td>
<td>newsPublishTime</td>
</tr>
<tr>
<td>文章内容</td>
<td>newsContent</td>
</tr>
</tbody>
</table>
<pre><code class="language-python"># spider.py
# 爬取当前网页
        print('start parse : ' + response.url)
        self.destination_list.remove(response.url)
        if response.url.startswith(&quot;http://www.view.sdu.edu.cn/info/&quot;):
            item = NewsItem()
            for box in response.xpath('//div[@class=&quot;new_show clearfix&quot;]/div[@class=&quot;le&quot;]'):
                # article title
                item['newsTitle'] = box.xpath('.//div[@class=&quot;news_tit&quot;]/h3/text()').extract()[0].strip()

                # article url
                item['newsUrl'] = response.url
                item['newsUrlMd5'] = self.md5(response.url)

                # article click time
                item['newsClick'] = box.xpath('.//div[@class=&quot;news_tit&quot;]/p/span/script/text()').extract()[0].strip()
                pattern = re.compile(r'\(.*?\)')
                parameters = re.search(pattern, item['newsClick']).group(0)
                parameters = parameters[1:-1].split(',')
                parameters[0] = re.search(re.compile(r'\&quot;.*?\&quot;'), parameters[0]).group(0)[1:-1]
                parameters[1] = parameters[1].strip()
                parameters[2] = parameters[2].strip()
                request_url = 'http://www.view.sdu.edu.cn/system/resource/code/news/click/dynclicks.jsp'
                request_data = {'clicktype': parameters[0], 'owner': parameters[1], 'clickid': parameters[2]}
                request_get = requests.get(request_url, params=request_data)
                item['newsClick'] = request_get.text

                # article publish time
                item['newsPublishTime'] = box.xpath('.//div[@class=&quot;news_tit&quot;]/p[not(@style)]/text()').extract()[0].strip()[5:]

                # article content
                item['newsContent'] = box.xpath('.//div[@class=&quot;news_content&quot;]').extract()[0].strip()
                regexp = re.compile(r'&lt;[^&gt;]+&gt;', re.S)
                item['newsContent'] = regexp.sub('',item['newsContent'])    # delete templates &lt;&gt;

                # 索引构建flag
                item['indexed'] = 'False'

                # yield it
                yield item
</code></pre>
<h3 id="52-宽度优先搜索爬取">5.2 宽度优先搜索爬取</h3>
<p>爬虫基于宽度优先搜索，对<a href="http://www.view.sdu.edu.cn/">http://www.view.sdu.edu.cn/</a>区段的网址进行爬取，并将<a href="http://www.view.sdu.edu.cn/info/">http://www.view.sdu.edu.cn/info/</a>区段的新闻内容提取出来。</p>
<pre><code class="language-python"># settings.py
# 先进先出，广度优先
DEPTH_PRIORITY = 1
SCHEDULER_DISK_QUEUE = 'scrapy.squeue.PickleFifoDiskQueue'
SCHEDULER_MEMORY_QUEUE = 'scrapy.squeue.FifoMemoryQueue'
</code></pre>
<h3 id="53-二分法去重">5.3 二分法去重</h3>
<p>所有已经爬取过的网址都会以MD5特征的形式顺序存储在list中，当获取新的url时，通过二分法查找list中是否存在该url的特征值，以达到去重的目的。</p>
<p>Scrapy库自带了查重去重的功能，但为了保证效率，自行编写了二分法去重，但并未关闭scrapy库自带的去重功能。</p>
<pre><code class="language-python"># spider.py
# md5 check
md5_url = self.md5(real_url)
if self.binary_md5_url_search(md5_url) &gt; -1:    # 二分法查找存在当前MD5
    pass
else:
    self.binary_md5_url_insert(md5_url) # 二分法插入当前MD5
    self.destination_list.append(real_url)  # 插入爬虫等待序列
    yield scrapy.Request(real_url, callback=self.parse, errback=self.errback_httpbin)
</code></pre>
<h3 id="54-断点续爬">5.4 断点续爬</h3>
<p>每爬取一定次数后都会将当前爬虫状态存储在pause文件夹下，重新运行爬虫时会继续上一次保存的断点进行爬取。Scrapy有自带的断点续爬功能（在settings.py中设置），但貌似在Pycharm中行不通。</p>
<pre><code class="language-python"># spider.py
# counter++，并在合适的时候保存断点
def counter_plus(self):
    print('待爬取网址数：' + (str)(len(self.destination_list)))
    # 断点续爬功能之保存断点
    if self.counter % self.save_frequency == 0:  # 爬虫经过save_frequency次爬取后
        print('Rayiooo：正在保存爬虫断点....')

        f = open('./pause/response.seen', 'wb')
        pickle.dump(self.url_md5_seen, f)
        f.close()

        f = open('./pause/response.dest', 'wb')
        pickle.dump(self.destination_list, f)
        f.close()

        self.counter = self.save_frequency

    self.counter += 1  # 计数器+1
</code></pre>
<h3 id="55-数据存入mongodb">5.5 数据存入MongoDB</h3>
<p>关系类数据库不适用于爬虫数据存储，因此使用非关系类数据库MongoDB。数据库可以用可视化工具方便查看，例如Mongo Management Studio。</p>
<pre><code class="language-python"># pipelines.py
class MongoDBPipeline(object):
    def __init__(self):
        host = settings[&quot;MONGODB_HOST&quot;]
        port = settings[&quot;MONGODB_PORT&quot;]
        dbname = settings[&quot;MONGODB_DBNAME&quot;]
        sheetname = settings[&quot;MONGODB_SHEETNAME&quot;]
        # 创建MONGODB数据库链接
        client = pymongo.MongoClient(host=host, port=port)
        # 指定数据库
        mydb = client[dbname]
        # 存放数据的数据库表名
        self.post = mydb[sheetname]

    def process_item(self, item, spider):
        data = dict(item)
        # self.post.insert(data)    # 直接插入的方式有可能导致数据重复
        # 更新数据库中的数据，如果upsert为Ture，那么当没有找到指定的数据时就直接插入，反之不执行插入
        self.post.update({'newsUrlMd5': item['newsUrlMd5']}, data, upsert=True)
        return item
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2018/05/24/5b065b225414c.jpg" alt="Mongo Management Studio 可视化工具显示.jpg" loading="lazy"></figure>
<h2 id="6-索引构建特性">6 索引构建特性</h2>
<p>索引构建代码位于<code>indexbuilder/</code>目录下。</p>
<h3 id="61-断点续构">6.1 断点续构</h3>
<p>构建倒排索引的过程比较缓慢，每小时只能构建10000条新闻的索引，因此在索引构建时及时存储新构建的索引，以保证能够断点续构。</p>
<h3 id="62-中文分词">6.2 中文分词</h3>
<p>Whoosh自带的Analyzer分词仅针对英文文章，而不适用于中文。从jieba库中引用的ChineseAnalyzer保证了能够对Documents进行中文分词。同样，ChineseAnalyzer在search时也能够对中文查询query提取关键字并进行搜索。</p>
<pre><code class="language-python"># index_builder.py
from jieba.analyse import ChineseAnalyzer

analyzer = ChineseAnalyzer()
# 创建索引模板
schema = Schema(
    newsId=ID(stored=True),
    newsTitle=TEXT(stored=True, analyzer=analyzer),
    newsUrl=ID(stored=True),
    newsClick=NUMERIC(stored=True, sortable=True),
    newsPublishTime=TEXT(stored=True),
    newsContent=TEXT(stored=False, analyzer=analyzer),  # 文章内容太长了，不存
)
</code></pre>
<h3 id="63-query类提供搜索api">6.3 Query类提供搜索API</h3>
<p>Query类自动执行了从index索引文件夹中取倒排索引来执行搜索，并返回一个结果数组。</p>
<pre><code class="language-python"># query.py
if __name__ == '__main__':
    q = Query()
    q.standard_search('软件园校区')
</code></pre>
<h2 id="7-搜索引擎特性">7 搜索引擎特性</h2>
<p>搜索引擎代码位于<code>searchengine/</code>目录下。</p>
<h3 id="71-django搭建web界面">7.1 Django搭建Web界面</h3>
<p>Django适合Web快速开发。result页面继承了main页面，搜索结果可以按照result中的指示显示在页面中。在django模板继承下，改变main.html中的页面布局，result.html的布局也会相应改变而不必使用Ctrl+c、Ctrl+v的方式改变。</p>
<pre><code class="language-python"># view.py
def search(request):
    res = None
    if 'q' in request.GET and request.GET['q']:
        res = q.standard_search(request.GET['q'])   # 获取搜索结果
        c = {
            'query': request.GET['q'],
            'resAmount': len(res),
            'results': res,
        }
    else:
        return render_to_response('main.html')

    return render_to_response('result.html', c) # 展示搜索结果
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2018/05/24/5b0662e1a68f5.jpg" alt="姜海涛的搜索结果.jpg" loading="lazy"></figure>
<h3 id="72-搜索迅速">7.2 搜索迅速</h3>
<p>第一次搜索时，可能因为倒排索引index的取出时间较长而搜索缓慢，但一旦index取出，对于70000余条新闻的搜索将非常迅速，秒出结果。</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://blog.csdn.net/zjiang1994/article/details/52779537">scrapy爬虫框架入门实例</a></p>
<p><a href="https://blog.csdn.net/wqh_jingsong/article/details/54981344">笔记：scrapy爬取的数据存入MySQL，MongoDB</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/20938685?utm_source=qq&amp;utm_medium=social&amp;utm_member=MWIxZDY0Nzg4YWQ5ODRkYzhlNzAyMDZiMTgwZTE0NzM%3D%0A">搜索那些事 - 用Golang写一个搜索引擎(0x00) --- 从零开始（分享自知乎网）</a></p>
<p><a href="https://www.jianshu.com/p/127c8c0b908a">Whoosh + jieba 中文检索</a></p>
<p><a href="https://www.cnblogs.com/Micang/p/6346437.html">利用whoosh对mongoDB的中文文档建立全文检索</a></p>
<p><a href="http://www.runoob.com/django/django-first-app.html">Django 创建第一个项目</a></p>
<p><a href="https://blog.csdn.net/zhangxinrun/article/details/8095118/">Django模板系统(非常详细)</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Joint Computation and Communication Cooperation for Energy-Efficient Mobile Edge Computing 论文笔记]]></title>
        <id>https://www.rayiooo.top/post/joint-computation-and-communication-cooperation-for-energy-efficient-mobile-edge-computing-lun-wen-bi-ji/</id>
        <link href="https://www.rayiooo.top/post/joint-computation-and-communication-cooperation-for-energy-efficient-mobile-edge-computing-lun-wen-bi-ji/">
        </link>
        <updated>2020-05-05T14:40:33.000Z</updated>
        <summary type="html"><![CDATA[<p>本文研究了移动边缘计算（MEC）中计算卸载（computation offloading）的优化问题。在边缘网络中如何分配用户的计算任务可以使整体耗电量最小？本文针对 User - Helper - AP 三点式模型求解这个问题的最优解。通过构建一个线性规划问题和一个非线性规划问题来分别解可分割任务和不可分割任务的最优耗电量，并使用拉格朗日乘子法和 KKT 条件等方法求出结果，以达到节约设备用电的目的。这篇文章没有什么特别的亮点，仅仅是 LP 问题的一个应用。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文研究了移动边缘计算（MEC）中计算卸载（computation offloading）的优化问题。在边缘网络中如何分配用户的计算任务可以使整体耗电量最小？本文针对 User - Helper - AP 三点式模型求解这个问题的最优解。通过构建一个线性规划问题和一个非线性规划问题来分别解可分割任务和不可分割任务的最优耗电量，并使用拉格朗日乘子法和 KKT 条件等方法求出结果，以达到节约设备用电的目的。这篇文章没有什么特别的亮点，仅仅是 LP 问题的一个应用。</p>
<!-- more -->
<h2 id="1-introduction">1 Introduction</h2>
<p>介绍 User - Helper - AP 三点式 MEC 模型。</p>
<h2 id="2-system-model">2 System Model</h2>
<p>构建所提出的模型。</p>
<p>待计算任务的长度为L，分别分配给三点设备。User 自己计算叫本地计算，让 Helper 帮忙叫计算协作，让 AP 帮忙叫通信协作。</p>
<h3 id="2a-时间槽">2.A 时间槽</h3>
<p>该模型共有4段时间槽，对应模型4个阶段。</p>
<h3 id="2b-计算卸载的传输能耗">2.B 计算卸载的传输能耗</h3>
<p>计算卸载就是将 User 自己的任务卸载给别人帮忙计算。</p>
<p>利用<strong>香农定理</strong>，得到了信道传输最大速率，该速率乘以对应时间槽时长就是总传输数据量。由各阶段传输功率和时长，得到传输过程的能耗。</p>
<p>User 传 AP 的过程由 Helper 辅助传输，叫做 DF relay。根据参考文献结论，得到该传输过程总共传输的数据长度。</p>
<h3 id="2c-计算能耗">2.C 计算能耗</h3>
<p>给出了三台设备在此过程中各自的计算能耗。</p>
<p>因为恒频计算优于变频计算，因此计算频率指定为恒定值。</p>
<p>AP处的计算能耗不考虑，因为不 care 它耗多少电，因此它将以最高频率定频运算。</p>
<h2 id="3-problem-formulation">3 Problem Formulation</h2>
<p>该章节构建了一个线性规划问题 P1 和一个非线性规划问题 P2，使得该模型传输的能耗最小（不考虑AP能耗）。P1 对应 partial offloading（可切割问题，可以协作计算），P2 对应 binary loading（不可切割问题，只能一台设备计算）。</p>
<h3 id="3a-可行性分析">3.A 可行性分析</h3>
<p>限定 task 的最大比特长度。</p>
<h2 id="4-optimal-solution-to-p1">4 Optimal Solution to P1</h2>
<p>引入辅助变量 E，消去 P，将 P1 问题转化成 P1.1 问题。</p>
<p>Lemma 1 证明该问题是凸问题。然后用拉格朗日乘子法得到函数 L，进而得到对偶函数 g，让 g 由下往上逼近 L，以此得到 L 的下界。</p>
<p>Lemma 2 的结论保证了 g 不会因消息长度过大而趋向于负无穷，无法从下定界。基于该结论，问题进一步转化为 D1.1。</p>
<p>由于符合 Slater 条件， P1.1 和 D1.1 有强对偶性，因此通过求解 D1.1 来得到最优解。</p>
<h3 id="4a-对偶函数-g-的推导">4.A 对偶函数 g 的推导</h3>
<p>将 L 函数拆分成互不影响的最优化问题问题 (31) - (35)，分别求解即可。不等式约束的最优化问题，构造拉格朗日函数，使用 KKT 条件进行求解，得到 E、τ、l 的最优解。</p>
<p>Remark 1 指明，上述最优解中在某些条件下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>τ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">τ_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">l_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 最优解不是唯一值。我们将两项置为0，以此来评估对偶函数 g。但是这会导致这个解对于问题 P1.1 不可行或非最优，因此在 4.C 中讨论该问题。</p>
<h3 id="4b-计算-λ-μ-最优解来最大化-g">4.B 计算 λ &amp; μ 最优解来最大化 g</h3>
<p>由于对偶函数 g 通常是凹的、不可微的，因此使用基于次梯度的方法（如椭球法）来求解 λ 和 μ 的最优值。具体过程没说，不太懂。</p>
<h3 id="4c-p1-问题的最优原始解">4.C P1 问题的最优原始解</h3>
<p>通过用已求出的各变量最优解带入原来的 P1 或 P1.1 问题，得到新的 LP 问题，用该问题来求解 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>τ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">τ_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">l_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的最优解。</p>
<p>最后用 Table 1 算法展示了求解 P1 问题的全过程，并根据结果提出一些见解：</p>
<ul>
<li>持续时间 T 变大时，用户更喜欢在 User 本地计算。</li>
<li>信道功率增益 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mn>01</mn></msub></mrow><annotation encoding="application/x-tex">h_{01}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 变强时，卸载功率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>P</mi><mn>1</mn><mrow><mi>o</mi><mi>p</mi><mi>t</mi><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">P_1^{opt1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.198324em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.932016em;"><span style="top:-2.433692em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span> 增加，用户更喜欢将更多任务卸载到 Helper 进行计算协作。</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>P</mi><mn>2</mn><mrow><mi>o</mi><mi>p</mi><mi>t</mi><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">P_2^{opt1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.198324em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.932016em;"><span style="top:-2.433692em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span> 取决于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mn>01</mn></msub></mrow><annotation encoding="application/x-tex">h_{01}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">h_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>P</mi><mn>3</mn><mrow><mi>o</mi><mi>p</mi><mi>t</mi><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">P_3^{opt1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.198324em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.932016em;"><span style="top:-2.433692em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">t</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span> 随 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">h_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 增加而增加。<br>
通过这些见解可以设计实验。</li>
</ul>
<h2 id="5-optimal-solution-to-p2">5 Optimal Solution to P2</h2>
<p>P2 问题相对简单，因为 binary offloading 只需一台设备计算，只要分别计算三台设备的能耗并进行比较即可。</p>
<h3 id="5a">5.A</h3>
<p><strong>本地计算模式</strong>可直接得出结果。</p>
<p><strong>计算协作模式</strong>（to Helper）是一个单变量优化问题，用二分法即可解得。</p>
<p><strong>通信协作模式</strong>（to AP）是多变量优化，与 P1 问题同法解得。</p>
<h2 id="6-numerical-results">6 Numerical Results</h2>
<p>用对比法对比各种方法效果。分别针对 partial offloading、binary offloading 两种情况，设计本地计算、计算协作、通信协作、三点协作几种方式进行实验。</p>
<p>实验分别研究了时间 T 对任务最大长度的影响、T 对平均能量消耗的影响、任务长度 L 对平均能量消耗的影响、User 到 Helper 距离对平均能量消耗的影响。</p>
<h2 id="7-conclusion">7 Conclusion</h2>
<p>计算与通信三点协作方式最优。</p>
<p>未来仍待解决的问题：</p>
<ul>
<li>尽管只考虑了三点式作业，但可以推广到更一般的情况。但如何有效地将多个 Helper 和 User 配对，以及如何有效设计多用户计算卸载和协作中继仍是困难的问题，需进一步研究。</li>
<li>本文旨在减少总能量消耗，因此采用集中分配。但 Helper 有自身利益，如何采用激励措施激励 Helper 参与计算是一个值得考虑的问题。</li>
</ul>
<h2 id="参考">参考</h2>
<p>[1]<a href="https://blog.csdn.net/qq_34082798/article/details/98106844">MEC笔记-概述</a><br>
[2]<a href="https://zhuanlan.zhihu.com/p/83024975">什么是计算卸载？</a><br>
[3]<a href="https://en.wikipedia.org/wiki/Relay_channel">Relay Channel - WikiPedia</a><br>
[4]<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92">非线性规划 - WikiPedia</a><br>
[5]<a href="https://blog.csdn.net/xholes/article/details/79899235">凸优化学习：对偶</a><br>
[6]<a href="https://blog.csdn.net/johnnyconstantine/article/details/46335763">KKT条件介绍</a><br>
[7]<a href="https://blog.csdn.net/xiaohukun/article/details/78202351">拉格朗日乘子法（Lagrange Multiplier) 和KKT条件</a><br>
[8]<a href="https://blog.csdn.net/bitcarmanlee/article/details/51896348">次导数 次梯度 小结</a></p>
]]></content>
    </entry>
</feed>